/*
 * This file is generated by jOOQ.
 */
package lv.bogatirjovs.currencycalculatorkotlin.jooq.tables.daos


import java.math.BigDecimal
import java.time.LocalDateTime

import kotlin.collections.List

import lv.bogatirjovs.currencycalculatorkotlin.jooq.tables.CurrencyConversion
import lv.bogatirjovs.currencycalculatorkotlin.jooq.tables.records.CurrencyConversionRecord

import org.jooq.Configuration
import org.jooq.impl.DAOImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class CurrencyConversionDao(configuration: Configuration?) : DAOImpl<CurrencyConversionRecord, lv.bogatirjovs.currencycalculatorkotlin.jooq.tables.pojos.CurrencyConversion, Long>(CurrencyConversion.CURRENCY_CONVERSION, lv.bogatirjovs.currencycalculatorkotlin.jooq.tables.pojos.CurrencyConversion::class.java, configuration) {

    /**
     * Create a new CurrencyConversionDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: lv.bogatirjovs.currencycalculatorkotlin.jooq.tables.pojos.CurrencyConversion): Long? = o.id

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfId(lowerInclusive: Long?, upperInclusive: Long?): List<lv.bogatirjovs.currencycalculatorkotlin.jooq.tables.pojos.CurrencyConversion> = fetchRange(CurrencyConversion.CURRENCY_CONVERSION.ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    fun fetchById(vararg values: Long): List<lv.bogatirjovs.currencycalculatorkotlin.jooq.tables.pojos.CurrencyConversion> = fetch(CurrencyConversion.CURRENCY_CONVERSION.ID, *values.toTypedArray())

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    fun fetchOneById(value: Long): lv.bogatirjovs.currencycalculatorkotlin.jooq.tables.pojos.CurrencyConversion? = fetchOne(CurrencyConversion.CURRENCY_CONVERSION.ID, value)

    /**
     * Fetch records that have <code>amount BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfAmount(lowerInclusive: BigDecimal?, upperInclusive: BigDecimal?): List<lv.bogatirjovs.currencycalculatorkotlin.jooq.tables.pojos.CurrencyConversion> = fetchRange(CurrencyConversion.CURRENCY_CONVERSION.AMOUNT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>amount IN (values)</code>
     */
    fun fetchByAmount(vararg values: BigDecimal): List<lv.bogatirjovs.currencycalculatorkotlin.jooq.tables.pojos.CurrencyConversion> = fetch(CurrencyConversion.CURRENCY_CONVERSION.AMOUNT, *values)

    /**
     * Fetch records that have <code>from_currency BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfFromCurrency(lowerInclusive: String?, upperInclusive: String?): List<lv.bogatirjovs.currencycalculatorkotlin.jooq.tables.pojos.CurrencyConversion> = fetchRange(CurrencyConversion.CURRENCY_CONVERSION.FROM_CURRENCY, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>from_currency IN (values)</code>
     */
    fun fetchByFromCurrency(vararg values: String): List<lv.bogatirjovs.currencycalculatorkotlin.jooq.tables.pojos.CurrencyConversion> = fetch(CurrencyConversion.CURRENCY_CONVERSION.FROM_CURRENCY, *values)

    /**
     * Fetch records that have <code>to_currency BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfToCurrency(lowerInclusive: String?, upperInclusive: String?): List<lv.bogatirjovs.currencycalculatorkotlin.jooq.tables.pojos.CurrencyConversion> = fetchRange(CurrencyConversion.CURRENCY_CONVERSION.TO_CURRENCY, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>to_currency IN (values)</code>
     */
    fun fetchByToCurrency(vararg values: String): List<lv.bogatirjovs.currencycalculatorkotlin.jooq.tables.pojos.CurrencyConversion> = fetch(CurrencyConversion.CURRENCY_CONVERSION.TO_CURRENCY, *values)

    /**
     * Fetch records that have <code>fee BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfFee(lowerInclusive: BigDecimal?, upperInclusive: BigDecimal?): List<lv.bogatirjovs.currencycalculatorkotlin.jooq.tables.pojos.CurrencyConversion> = fetchRange(CurrencyConversion.CURRENCY_CONVERSION.FEE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>fee IN (values)</code>
     */
    fun fetchByFee(vararg values: BigDecimal): List<lv.bogatirjovs.currencycalculatorkotlin.jooq.tables.pojos.CurrencyConversion> = fetch(CurrencyConversion.CURRENCY_CONVERSION.FEE, *values)

    /**
     * Fetch records that have <code>status BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfStatus(lowerInclusive: String?, upperInclusive: String?): List<lv.bogatirjovs.currencycalculatorkotlin.jooq.tables.pojos.CurrencyConversion> = fetchRange(CurrencyConversion.CURRENCY_CONVERSION.STATUS, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>status IN (values)</code>
     */
    fun fetchByStatus(vararg values: String): List<lv.bogatirjovs.currencycalculatorkotlin.jooq.tables.pojos.CurrencyConversion> = fetch(CurrencyConversion.CURRENCY_CONVERSION.STATUS, *values)

    /**
     * Fetch records that have <code>conversion_rate BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfConversionRate(lowerInclusive: BigDecimal?, upperInclusive: BigDecimal?): List<lv.bogatirjovs.currencycalculatorkotlin.jooq.tables.pojos.CurrencyConversion> = fetchRange(CurrencyConversion.CURRENCY_CONVERSION.CONVERSION_RATE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>conversion_rate IN (values)</code>
     */
    fun fetchByConversionRate(vararg values: BigDecimal): List<lv.bogatirjovs.currencycalculatorkotlin.jooq.tables.pojos.CurrencyConversion> = fetch(CurrencyConversion.CURRENCY_CONVERSION.CONVERSION_RATE, *values)

    /**
     * Fetch records that have <code>result BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfResult(lowerInclusive: BigDecimal?, upperInclusive: BigDecimal?): List<lv.bogatirjovs.currencycalculatorkotlin.jooq.tables.pojos.CurrencyConversion> = fetchRange(CurrencyConversion.CURRENCY_CONVERSION.RESULT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>result IN (values)</code>
     */
    fun fetchByResult(vararg values: BigDecimal): List<lv.bogatirjovs.currencycalculatorkotlin.jooq.tables.pojos.CurrencyConversion> = fetch(CurrencyConversion.CURRENCY_CONVERSION.RESULT, *values)

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfCreatedAt(lowerInclusive: LocalDateTime?, upperInclusive: LocalDateTime?): List<lv.bogatirjovs.currencycalculatorkotlin.jooq.tables.pojos.CurrencyConversion> = fetchRange(CurrencyConversion.CURRENCY_CONVERSION.CREATED_AT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    fun fetchByCreatedAt(vararg values: LocalDateTime): List<lv.bogatirjovs.currencycalculatorkotlin.jooq.tables.pojos.CurrencyConversion> = fetch(CurrencyConversion.CURRENCY_CONVERSION.CREATED_AT, *values)
}
