/*
 * This file is generated by jOOQ.
 */
package lv.bogatirjovs.currencycalculatorkotlin.jooq.tables.records


import jakarta.persistence.Column
import jakarta.persistence.Entity
import jakarta.persistence.GeneratedValue
import jakarta.persistence.GenerationType
import jakarta.persistence.Id
import jakarta.persistence.Table
import jakarta.validation.constraints.NotNull
import jakarta.validation.constraints.Size

import java.math.BigDecimal
import java.time.LocalDateTime

import lv.bogatirjovs.currencycalculatorkotlin.jooq.tables.CurrencyConversion

import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
@Entity
@Table(
    name = "currency_conversion",
    schema = "currency"
)
open class CurrencyConversionRecord() : UpdatableRecordImpl<CurrencyConversionRecord>(CurrencyConversion.CURRENCY_CONVERSION) {

    @get:Id
    @get:GeneratedValue(strategy = GenerationType.IDENTITY)
    @get:Column(name = "id", nullable = false)
    open var id: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    @get:Column(name = "amount", nullable = false, precision = 19, scale = 4)
    @get:NotNull
    open var amount: BigDecimal?
        set(value): Unit = set(1, value)
        get(): BigDecimal? = get(1) as BigDecimal?

    @get:Column(name = "from_currency", nullable = false, length = 3)
    @get:NotNull
    @get:Size(max = 3)
    open var fromCurrency: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    @get:Column(name = "to_currency", nullable = false, length = 3)
    @get:NotNull
    @get:Size(max = 3)
    open var toCurrency: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    @get:Column(name = "fee", nullable = false, precision = 5, scale = 4)
    @get:NotNull
    open var fee: BigDecimal?
        set(value): Unit = set(4, value)
        get(): BigDecimal? = get(4) as BigDecimal?

    @get:Column(name = "status", nullable = false, length = 20)
    @get:NotNull
    @get:Size(max = 20)
    open var status: String?
        set(value): Unit = set(5, value)
        get(): String? = get(5) as String?

    @get:Column(name = "conversion_rate", precision = 19, scale = 6)
    open var conversionRate: BigDecimal?
        set(value): Unit = set(6, value)
        get(): BigDecimal? = get(6) as BigDecimal?

    @get:Column(name = "result", precision = 19, scale = 6)
    open var result: BigDecimal?
        set(value): Unit = set(7, value)
        get(): BigDecimal? = get(7) as BigDecimal?

    @get:Column(name = "created_at", nullable = false, precision = 6)
    open var createdAt: LocalDateTime?
        set(value): Unit = set(8, value)
        get(): LocalDateTime? = get(8) as LocalDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    /**
     * Create a detached, initialised CurrencyConversionRecord
     */
    constructor(id: Long? = null, amount: BigDecimal? = null, fromCurrency: String? = null, toCurrency: String? = null, fee: BigDecimal? = null, status: String? = null, conversionRate: BigDecimal? = null, result: BigDecimal? = null, createdAt: LocalDateTime? = null): this() {
        this.id = id
        this.amount = amount
        this.fromCurrency = fromCurrency
        this.toCurrency = toCurrency
        this.fee = fee
        this.status = status
        this.conversionRate = conversionRate
        this.result = result
        this.createdAt = createdAt
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised CurrencyConversionRecord
     */
    constructor(value: lv.bogatirjovs.currencycalculatorkotlin.jooq.tables.pojos.CurrencyConversion?): this() {
        if (value != null) {
            this.id = value.id
            this.amount = value.amount
            this.fromCurrency = value.fromCurrency
            this.toCurrency = value.toCurrency
            this.fee = value.fee
            this.status = value.status
            this.conversionRate = value.conversionRate
            this.result = value.result
            this.createdAt = value.createdAt
            resetChangedOnNotNull()
        }
    }
}
